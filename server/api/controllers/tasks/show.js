module.exports = {
  friendlyName: 'Show tasks by user',
  description: 'Returns tasks assigned to the current user, including board, project, and assignee username',

  exits: {
    success: {
      description: 'Tasks retrieved successfully',
    },
  },

  fn: async function () {
    const userId = this.req.query.userId;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tasks = await Task.find({
      assigneeUserId: userId,
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Å–∫–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const tasksWithDetails = await Promise.all(
      tasks.map(async (task) => {
        try {
          const taskList = await TaskList.qm.getOneById(task.taskListId);
          const board = await Board.qm.getOneById(taskList.boardId);
          const project = await Project.qm.getOneById(board.projectId);
          const assignee = await User.qm.getOneById(task.assigneeUserId);

          return {
            id: task.id,
            taskListId: task.taskListId,
            name: task.name,
            position: task.position,
            isCompleted: task.isCompleted,
            createdAt: task.createdAt,
            updatedAt: task.updatedAt,
            assigneeUserId: task.assigneeUserId,
            boardId: board.id,
            projectId: project.id,

            // üî• –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            boardName: board.name,
            projectName: project.name,
            assigneeUsername: assignee.username,
          };
        } catch (err) {
          sails.log.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞—á–µ ${task.id}:`, err);
          return null;
        }
      })
    );

    // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∞—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ board –∏–ª–∏ project –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
    const validTasks = tasksWithDetails.filter(Boolean);

    // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
    const projectIds = [...new Set(validTasks.map(t => t.projectId))];
    const boardIds = [...new Set(validTasks.map(t => t.boardId))];
    const userIds = [...new Set(validTasks.map(t => t.assigneeUserId))];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –º–∞—Ö–æ–º
    const [projects, boards, users] = await Promise.all([
      Project.find({ id: projectIds }),
      Board.find({ id: boardIds }),
      User.find({ id: userIds }),
    ]);

    return {
      items: validTasks,
      included: {
        projects,
        boards,
        users: sails.helpers.users.presentMany(users, this.req.currentUser),
      },
    };
  },
};
